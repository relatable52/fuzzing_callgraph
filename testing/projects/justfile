set dotenv-load := true
set shell := ["bash", "-uc"]

# Export DOCKER_BUILDKIT
export DOCKER_BUILDKIT := "1"

# Define data directory (change to your desired location)
export CALLGRAPH:= env_var("CALLGRAPH")
export CORPUS := env_var("CORPUS")

# Define project paths
export BASE_DIR := absolute_path("../")
PROJECT := env_var("PROJECT")
export PROJECT_PATH := CALLGRAPH / PROJECT
export TARGET_PATH := PROJECT_PATH / "target"

# Fuzzing parameters
FUZZER := env_var("FUZZER")
FUZZING_THREADS := "8"
FUZZING_TIME := "3600"

# Static callgraph parameters
DYNCG_TIMEOUT := "999m"
DYNCG_MEMORY := "128G"
STATICCG_TIMEOUT := "180m"
STATICCG_MEMORY := "128G"

# Containers
FUZZING_CONTAINER := "fuzz-" + PROJECT
COVERAGE_CONTAINER := "coverage-" + PROJECT
DYNCG_CONTAINER := "dyncg-" + PROJECT
STATICCG_CONTAINER := "staticcg-" + PROJECT
COMPARECG_CONTAINER := "comparecg-" + PROJECT

# Libraries
JACOCO := BASE_DIR / "lib/jacoco"

UID := `id -u`
GID := `id -g`

# Disabled hooks
DISABLED_HOOKS:= "com.code_intelligence.jazzer.sanitizers.ReflectiveCall:com.code_intelligence.jazzer.sanitizers.SqlInjection:com.code_intelligence.jazzer.sanitizers.ServerSideRequestForgery"

# Recipe to build Jazzer Docker image
[private]
build_jazzer_image:
    docker build -t jazzer -f {{BASE_DIR}}/jazzer-linux/Dockerfile {{BASE_DIR}}/jazzer-linux

[private]
build_jazzer_input_parser:
    docker build --tag=jazzer-input-parser "{{BASE_DIR}}"/jazzer_input_parser

# Recipe to build JCG Docker image
[private]
build_jcg_image:
    docker build -t jcg -f {{BASE_DIR}}/jcg/Dockerfile {{BASE_DIR}}/jcg

# Recipe to build project JAR
build_jar: build_jazzer_image
    if [ ! -d "{{BASE_DIR}}/projects/${PROJECT}" ]; then echo "Project ${PROJECT} not found"; exit 1; fi
    mkdir -p "{{TARGET_PATH}}"
    cd ${PROJECT}
    docker build --output="{{TARGET_PATH}}" -t ${PROJECT} -f ${PROJECT}/Dockerfile ${PROJECT}

[private]
prepare_dictionary EXPERIMENT: 
    mkdir -p {{TARGET_PATH}}/{{EXPERIMENT}}

    chmod +x "{{BASE_DIR}}/projects/{{PROJECT}}/prepare_dictionary.sh"
    "{{BASE_DIR}}/projects/{{PROJECT}}/prepare_dictionary.sh" {{TARGET_PATH}}/{{EXPERIMENT}}

[private]
prepare_corpus EXPERIMENT:
    mkdir -p {{TARGET_PATH}}/{{EXPERIMENT}}/corpus

    chmod +x "{{BASE_DIR}}/projects/{{PROJECT}}/prepare_corpus.sh"
    "{{BASE_DIR}}/projects/{{PROJECT}}/prepare_corpus.sh" {{TARGET_PATH}}/{{EXPERIMENT}}/corpus

# Recipe to fuzz project
fuzz EXPERIMENT: (prepare_dictionary EXPERIMENT) build_jar build_jazzer_image && (coverage_report EXPERIMENT "fuzzing_coverage" "true")
    # Ensure directories exist
    mkdir -p "{{TARGET_PATH}}/{{EXPERIMENT}}/fuzzing_coverage" \
    "{{PROJECT_PATH}}/resources" \
    "{{TARGET_PATH}}/{{EXPERIMENT}}/corpus"

    touch "{{TARGET_PATH}}/{{EXPERIMENT}}/sync_file" \
    "{{TARGET_PATH}}/{{EXPERIMENT}}/fuzzing_coverage/coverage.exec" \

    chmod 777 "{{TARGET_PATH}}/{{EXPERIMENT}}/sync_file" \
    "{{TARGET_PATH}}/{{EXPERIMENT}}/fuzzing_coverage/coverage.exec" \

    # Run fuzzer
    docker rm -f "{{FUZZING_CONTAINER}}"
    docker run -it \
        --name "{{FUZZING_CONTAINER}}" \
        --mount type=bind,source="{{TARGET_PATH}}/repo",target=/repo,readonly \
        --mount type=bind,source="{{TARGET_PATH}}/{{EXPERIMENT}}/corpus",target=/corpus \
        --mount type=bind,source="{{PROJECT_PATH}}/resources",target=/resources/,readonly \
        --mount type=bind,source="{{TARGET_PATH}}/{{EXPERIMENT}}/fuzzing_coverage/coverage.exec",target=/fuzzing/coverage.exec \
        --mount type=bind,source="{{TARGET_PATH}}/{{EXPERIMENT}}/sync_file",target=/fuzzing/sync_file \
        --mount type=bind,source="{{TARGET_PATH}}"/{{EXPERIMENT}}/dict.txt,target=/dict.txt,readonly \
        jazzer \
        --cp=$(find "{{TARGET_PATH}}"/repo -name '*.jar' -type f -printf '/repo/%f '  | xargs echo | tr ' ' ':') \
        --target_class={{FUZZER}} \
        --instrumentation_includes=$INSTRUMENT_CLASSES \
        --disabled_hooks={{DISABLED_HOOKS}} \
        --id_sync_file=/fuzzing/sync_file \
        -max_total_time={{FUZZING_TIME}} \
        -fork={{FUZZING_THREADS}} \
        -max_len=100000 \
        -timeout=60 \
        -dict=dict.txt \
        corpus

[private]
coverage EXPERIMENT: build_jar build_jazzer_image && (coverage_report EXPERIMENT "coverage" "false")
    mkdir -p "{{TARGET_PATH}}"/{{EXPERIMENT}}/coverage "{{PROJECT_PATH}}"/resources
    touch "{{TARGET_PATH}}"/{{EXPERIMENT}}/coverage/coverage.exec
    chmod 777 "{{TARGET_PATH}}"/{{EXPERIMENT}}/coverage/coverage.exec

    # record coverage
    docker rm -f {{COVERAGE_CONTAINER}}
    docker run -it \
        --name {{COVERAGE_CONTAINER}} \
        --mount type=bind,source="{{TARGET_PATH}}/repo",target=/repo,readonly \
        --mount type=bind,source="{{PROJECT_PATH}}/resources/",target=/resources/,readonly \
        --mount type=bind,source="{{JACOCO}}/jacocoagent.jar",target=/jacocoagent.jar,readonly \
        --mount type=bind,source="{{TARGET_PATH}}/{{EXPERIMENT}}/corpus",target=/corpus,readonly \
        --mount type=bind,source="{{TARGET_PATH}}/{{EXPERIMENT}}/coverage/coverage.exec",target=/coverage/coverage.exec \
        jazzer \
        --cp=$(find "{{TARGET_PATH}}/repo" -name '*.jar' -type f -printf '/repo/%f '  | xargs echo | tr ' ' ':') \
        --target_class={{FUZZER}} \
        --instrumentation_includes=$INSTRUMENT_CLASSES \
        --disabled_hooks={{DISABLED_HOOKS}} \
        --jvm_args="-javaagent\\:/jacocoagent.jar=destfile=/coverage/coverage.exec" \
        -rss_limit_mb=8182 \
        -runs=0 \
        corpus 

[private]
coverage_report EXPERIMENT COVERAGE_DIR EXCLUDE_CLASSES:
    mkdir -p "{{TARGET_PATH}}/temp"
    cp -a "{{TARGET_PATH}}/classes/." "{{TARGET_PATH}}/temp"
    if {{EXCLUDE_CLASSES}} && [ ! -z $COVERAGE_EXCLUDES ]; \
    then \
      readarray -t EXCLUDES <<< "$COVERAGE_EXCLUDES" && \
      for (( n=0; n < ${#EXCLUDES[*]}; n++)) do \
        rm "{{TARGET_PATH}}/temp/${EXCLUDES[n]//\./\/}.class"; \
      done; \
    fi

    # generate report
    rm -rf "{{TARGET_PATH}}/{{EXPERIMENT}}/{{COVERAGE_DIR}}/html"
    mkdir -p "{{TARGET_PATH}}/{{EXPERIMENT}}/{{COVERAGE_DIR}}/html"
    java -jar {{JACOCO}}/jacococli.jar \
      report "{{TARGET_PATH}}/{{EXPERIMENT}}/{{COVERAGE_DIR}}/coverage.exec" \
      --classfiles "{{TARGET_PATH}}/temp" \
      --html "{{TARGET_PATH}}/{{EXPERIMENT}}/{{COVERAGE_DIR}}/html"

    rm -rf "{{TARGET_PATH}}/temp"

# Record coverage on seed corpus
coverage_seed: (prepare_corpus "seed") (coverage "seed")

# Record coverage on fuzzing without seed corpus
coverage_fuzzing: (fuzz "fuzzing") (coverage "fuzzing")

# Record coverage on fuzzing with seed corpus
coverage_fuzzing_seed: (prepare_corpus "fuzzing_seed") (fuzz "fuzzing_seed") (coverage "fuzzing_seed")

[private]
dynamic_callgraph EXPERIMENT: build_jar build_jcg_image
    mkdir -p "{{TARGET_PATH}}/{{EXPERIMENT}}/dyncg" "{{PROJECT_PATH}}/resources/"
    touch "{{TARGET_PATH}}/{{EXPERIMENT}}/dyncg/log.txt"
    chmod 777 "{{TARGET_PATH}}/{{EXPERIMENT}}/dyncg/"

    # Run dynamic callgraph
    docker rm -f {{DYNCG_CONTAINER}}
    docker run -it \
        --name {{DYNCG_CONTAINER}} \
        --mount=type=bind,source="{{TARGET_PATH}}/repo",target=/repo,readonly \
        --mount=type=bind,source="{{PROJECT_PATH}}/resources/",target=/resources/,readonly \
        --mount=type=bind,source="{{TARGET_PATH}}/{{EXPERIMENT}}/corpus",target=/corpus,readonly \
        --mount=type=bind,source="{{BASE_DIR}}/projects/{{PROJECT}}/jcg.conf,"target=/jcg-conf/$PROJECT.conf,readonly \
        --mount=type=bind,source="{{TARGET_PATH}}/{{EXPERIMENT}}/dyncg",target=/dyncg \
        --mount=type=bind,source="{{TARGET_PATH}}/{{EXPERIMENT}}/dyncg/log.txt",target=/log.txt \
        jcg \
        {{DYNCG_TIMEOUT}} \
        {{DYNCG_MEMORY}} \
        runMain Evaluation \
        --input /jcg-conf/ \
        --output /dyncg \
        --program-args /corpus \
        --adapter Dynamic \
        --algorithm-prefix Dynamic \
        --project-prefix $PROJECT \
        --debug

dynamic_callgraph_fuzzing_seed: (dynamic_callgraph "fuzzing_seed")

[private]
static_callgraph FRAMEWORK ALGO: build_jar build_jcg_image
    mkdir -p "{{TARGET_PATH}}/staticcg" "{{TARGET_PATH}}/staticcg/{{FRAMEWORK}}/{{ALGO}}/" "{{PROJECT_PATH}}/resources/"
    touch "{{TARGET_PATH}}/staticcg/{{FRAMEWORK}}/{{ALGO}}/log.txt"
    chmod 777 "{{TARGET_PATH}}/staticcg"

    # Run static callgraph
    docker rm -f {{STATICCG_CONTAINER}}
    docker run -it \
        --name {{STATICCG_CONTAINER}} \
        --mount=type=bind,source="{{TARGET_PATH}}/repo",target=/repo,readonly \
        --mount=type=bind,source="{{PROJECT_PATH}}/resources/",target=/resources/,readonly \
        --mount=type=bind,source="{{BASE_DIR}}/projects/{{PROJECT}}/jcg.conf",target=/jcg-conf/$PROJECT.conf,readonly \
        --mount=type=bind,source="{{TARGET_PATH}}/staticcg",target=/staticcg \
        --mount=type=bind,source="{{TARGET_PATH}}/staticcg/{{FRAMEWORK}}/{{ALGO}}/log.txt",target=/log.txt \
        jcg \
        {{STATICCG_TIMEOUT}} \
        {{STATICCG_MEMORY}} \
        runMain Evaluation \
        --input /jcg-conf/ \
        --output /staticcg \
        --adapter {{FRAMEWORK}} \
        --algorithm-prefix {{ALGO}} \
        --project-prefix $PROJECT \
        --debug

[private]
opal_callgraphs: (static_callgraph "OPAL" "CHA") (static_callgraph "OPAL" "RTA") (static_callgraph "OPAL" "0-CFA")
[private]
wala_callgraphs: (static_callgraph "WALA" "CHA") (static_callgraph "WALA" "RTA") (static_callgraph "WALA" "0-CFA")
[private]
soot_callgraphs: (static_callgraph "Soot" "CHA")
[private]
doop_callgraphs: (static_callgraph "Doop" "context-insensitive")

static_callgraphs: opal_callgraphs wala_callgraphs soot_callgraphs

[private]
clean_experiment EXPERIMENT:
    rm -rf "{{TARGET_PATH}}/{{EXPERIMENT}}"

[private]
clean_all_experiments: (clean_experiment "seed") (clean_experiment "fuzzing") (clean_experiment "fuzzing_seed")

[private]
clean_dyncg:
    rm -rf "{{TARGET_PATH}}/dyncg"

[private]
clean_staticcg:
    rm -rf "{{TARGET_PATH}}/staticcg"

[private]
clean_project_build:
    rm -rf "{{TARGET_PATH}}/repo"
    rm -rf "{{TARGET_PATH}}/classes"

clean: clean_all_experiments clean_dyncg clean_staticcg